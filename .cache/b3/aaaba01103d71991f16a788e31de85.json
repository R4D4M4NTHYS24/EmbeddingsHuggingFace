{"id":"../node_modules/onnxruntime-common/dist/lib/env.js","dependencies":[{"name":"C:\\sistemas-expertos\\IA\\embeddingsHuggingParcel\\node_modules\\onnxruntime-common\\dist\\lib\\env.js.map","includedInParent":true,"mtime":1705068292426},{"name":"C:\\sistemas-expertos\\IA\\embeddingsHuggingParcel\\node_modules\\onnxruntime-common\\lib\\env.ts","includedInParent":true,"mtime":1705068292668},{"name":"C:\\sistemas-expertos\\IA\\embeddingsHuggingParcel\\package.json","includedInParent":true,"mtime":1705508313228},{"name":"C:\\sistemas-expertos\\IA\\embeddingsHuggingParcel\\.browserslistrc","includedInParent":true,"mtime":1705506676578},{"name":"C:\\sistemas-expertos\\IA\\embeddingsHuggingParcel\\node_modules\\onnxruntime-common\\package.json","includedInParent":true,"mtime":1705068292376},{"name":"./env-impl","loc":{"line":3,"column":24,"index":120},"parent":"C:\\sistemas-expertos\\IA\\embeddingsHuggingParcel\\node_modules\\onnxruntime-common\\dist\\lib\\env.js","resolved":"C:\\sistemas-expertos\\IA\\embeddingsHuggingParcel\\node_modules\\onnxruntime-common\\dist\\lib\\env-impl.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.env = void 0;\nvar _envImpl = require(\"./env-impl\");\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * Represent a set of flags as a global singleton.\n */\nconst env = exports.env = new _envImpl.EnvImpl();"},"sourceMaps":{"js":{"mappings":[{"source":"../../lib/env.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":4}},{"source":"../../lib/env.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":12}},{"source":"../../lib/env.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":15}},{"source":"../../lib/env.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":22}},{"source":"../../lib/env.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":115,"column":0},"generated":{"line":11,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":7},"generated":{"line":14,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":13},"generated":{"line":14,"column":6}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":14,"column":9}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":14,"column":12}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":14,"column":19}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":14,"column":20}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":14,"column":23}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":24},"generated":{"line":14,"column":26}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":28},"generated":{"line":14,"column":30}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":35},"generated":{"line":14,"column":46}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":35},"generated":{"line":14,"column":47}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":14,"column":48}}],"sources":{"../../lib/env.ts":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {EnvImpl} from './env-impl';\nexport declare namespace Env {\n  export type WasmPrefixOrFilePaths = string|{\n    'ort-wasm.wasm'?: string;\n    'ort-wasm-threaded.wasm'?: string;\n    'ort-wasm-simd.wasm'?: string;\n    'ort-wasm-simd-threaded.wasm'?: string;\n  };\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @defaultValue `true`\n     */\n    simd?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm files or a set of overrides for each .wasm file. The override path should be\n     * an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl'|'webgl2';\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly'|'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal';\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  webgl: Env.WebGLFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = new EnvImpl();\n"},"lineCount":null}},"error":null,"hash":"1d682ab61de64e5e0a8a0ecfb5c70ecc","cacheData":{"env":{}}}